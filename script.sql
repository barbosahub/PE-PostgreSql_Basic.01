------------------  CAMPOS UTILIZADOS NO EXEMPLO

-- SERIAL       (PREENCHE INTEIRO AUTO-INCREMENT)
-- VARCHAR      (PREENCHE APENAS OS BITS DIGITADOS)
-- CHAR         (PREENCHE TODOS OS BITS, ATÉ OS NÃO DIGITADOS COMO "VAZIO")
-- TEXT         (PREENCHE TEXTO)
-- INTEGER      (PREENCHE INTEIRO)
-- NUMERIC      (PREENCHE NUMÉRICO DE ACORDO COM AS CASAS DECIMAIS)
-- BOOLEAN      (PREENCHE TRUE OU FALSE)
-- DATE         (PREENCHE DATA)
-- TIME         (PREENCHE HORA)
-- TIMESTAMP    (PREENCHE DATA E HORA)

------------------ CRIAÇÃO DA TABELA ALUNO
CREATE TABLE ALUNO(
	ID SERIAL,
	NOME VARCHAR(255),
	CPF CHAR(11),
	OBS TEXT,
	IDADE INTEGER,
	DINHEIRO NUMERIC(10,2),
	ALTURA REAL,
	ATIVO BOOLEAN,
	DATA_NASCIMENTO DATE,
	HORA_AULA TIME,
	MATRICULADO TIMESTAMP
);

------------------ INSERT NA TABELA ALUNO
INSERT INTO ALUNO (
    NOME,
    CPF,
    OBS,
    IDADE,
    DINHEIRO,
    ALTURA,
    ATIVO,
    DATA_NASCIMENTO,
    HORA_AULA,
    MATRICULADO)
VALUES (
    'RUI',
    '1112223344',
    'LOREM IPSUM',
    23,
    1000.00,
    1.73,
    TRUE,
    '1997-08-08',
    '16:30:00',
    '2020-12-20 16:30:00'
    );
INSERT INTO ALUNO (
    NOME,
    CPF,
    OBS,
    IDADE,
    DINHEIRO,
    ALTURA,
    ATIVO,
    DATA_NASCIMENTO,
    HORA_AULA,
    MATRICULADO)
VALUES (
    'JULIA',
    '99988877744',
    'LOREM IPSUM',
    23,
    1000.00,
    1.50,
    TRUE,
    '1997-01-03',
    '16:50:00',
    '2020-12-20 16:50:00'
    );

------------------ SELECT NA TABELA ALUNO
SELECT * FROM
    ALUNO;

------------------ UPDATE NA TABELA ALUNO
UPDATE
    ALUNO
SET
    NOME = 'RUI BARBOSA'
WHERE
    ID=1;

------------------ DELETE NA TABELA ALUNO
DELETE FROM
    ALUNO
WHERE
    ID = 1;

------------------ SELECT NA TABELA ALUNO COM LIKE &  NOT LIKE
SELECT * FROM
    ALUNO
WHERE
    NOME LIKE '_UI';

SELECT * FROM
    ALUNO
WHERE
    NOME NOT LIKE '_UI';

SELECT * FROM
    ALUNO
WHERE
    NOME LIKE '%IA';

------------------ CRIAÇÃO DA TABELA CURSO PK NOT NULL
-- CREATE TABLE CURSO (
--     ID INTEGER PRIMARY KEY ,
--     NOME VARCHAR(255) NOT NULL
-- );
--
-- INSERT INTO CURSO VALUES (1,'ALURA - PSQL');
-- INSERT INTO CURSO VALUES (1,'ALURA - PSQL');
--
-- SELECT * FROM CURSO;

------------------ CRIAÇÃO DA TABELA UTILIZANDO FK
-- DROP TABLE ALUNO;
CREATE TABLE departamentos (
    id SERIAL PRIMARY KEY,
    nome VARCHAR(255) NOT NULL
);
CREATE TABLE funcionarios (
    id SERIAL PRIMARY KEY,
    nome VARCHAR(255) NOT NULL,
    departamento_id INTEGER,
    FOREIGN KEY (departamento_id) REFERENCES departamentos (id)
);

INSERT INTO DEPARTAMENTOS (NOME) VALUES ('TECNOLOGIA');
INSERT INTO DEPARTAMENTOS (NOME) VALUES ('OPERACAO');
SELECT * FROM DEPARTAMENTOS;

INSERT INTO FUNCIONARIOS (NOME,DEPARTAMENTO_ID) VALUES ('RUI BARBOSA',1);
INSERT INTO FUNCIONARIOS (NOME,DEPARTAMENTO_ID) VALUES ('JULIA FERREIRA',1);
INSERT INTO FUNCIONARIOS (NOME,DEPARTAMENTO_ID) VALUES ('LUCAS COSTA',2);
SELECT * FROM FUNCIONARIOS;

------------------ SELECT COM INNER JOIN
SELECT
    F.nome AS NOME,
    D.nome AS Departamento
FROM
    FUNCIONARIOS F
INNER JOIN
    DEPARTAMENTOS D
on f.departamento_id = d.id;

------------------ CRATE TABLE COM CASCADE PARA DELETE CONFORME ARVORE DE INSERTS
-- CASO TIVER EM DIVERSAS TABELAS DIFERENTES, O CASCADE ALTERA EM TODAS OU REMOVE DE TODAS.
CREATE TABLE ALUNO_CURSO(
  ALUNO_ID INTEGER,
  CURSO_ID INTEGER,
  PRIMARY KEY (ALUNO_ID,CURSO_ID),
  FOREIGN KEY (ALUNO_ID)
    REFERENCES ALUNO(ID)
    ON DELETE CASCADE
);
CREATE TABLE ALUNO (
  ID SERIAL PRIMARY KEY,
  NOME varchar(255) NOT NULL
);

SELECT * FROM ALUNO_CURSO;
SELECT * FROM ALUNO;

INSERT INTO  ALUNO (NOME) VALUES ('RUI BARBOSA');
INSERT INTO  ALUNO (NOME) VALUES ('PEDRO PAULO');

INSERT INTO  ALUNO_CURSO (ALUNO_ID, CURSO_ID) VALUES (1,1);
INSERT INTO  ALUNO_CURSO (ALUNO_ID, CURSO_ID) VALUES (2,1);

DELETE FROM ALUNO WHERE ID = 1;

UPDATE ALUNO SET NOME = 'PEDRO' WHERE ID = 2;

------------------ SELECT COM LIMITE (Equivalente ao TOP)
SELECT * FROM ALUNO LIMIT  1;


------------------  Funções de agregação

-- COUNT    - RETORNA A QUANTIDADE DE REGISTOS
-- SUM      - RETORNA A SOMA
-- MAX      - RETORNO O VALOR MAIOR
-- MIN      - RETORNA O VALOR MENOR
-- AVG      - RETORNA MEDIA

select count(ID) from aluno;
select sum(ID) from aluno;
select max(id) from aluno;
select min(id) from aluno;
select avg(id) from aluno;

select NOME,count(ID) as qtd from aluno
group by NOME having count(id) < 5;